worker_processes 1;
error_log /dev/stderr info;

events {
    worker_connections 1024;
}

http {
    access_log /dev/stdout combined;
    lua_package_path "/usr/local/openresty/lualib/?.lua;/usr/local/openresty/lualib/?/init.lua;./lib/?/?.lua;./lib/?/init.lua;;";
    resolver 127.0.0.11 valid=5s; # Docker service discovery DNS

    # Declare a shared memory zone for the rllib local cache.
    lua_shared_dict rllib_local_cache 10m;

    # global defaults
    init_worker_by_lua_block {
        local rllib = require "rllib"
        rllib.init({
            use_redis_cluster = true,
            redis_cluster_nodes = {
                { ip = "redis-cluster", port = 7000 },
                { ip = "redis-cluster", port = 7001 },
                { ip = "redis-cluster", port = 7002 },
            },
            redis_host = "redis",
            redis_port = 6379,
            redis_timeout = 1000,
            redis_pool_size = 100,
            -- password = "your_redis_password", -- Uncomment and set if Redis requires auth
            -- db = 0,                           -- Uncomment and set if you want to use a specific Redis DB

            -- Optional: Override default rate limit for general cases
            -- default_limit = 50,
            -- default_window = 30,

            -- identifier_fn = function() return ngx.var.http_x_api_key or ngx.var.remote_addr end,
            local_cache_enabled = true,
            local_cache_name = "rllib_local_cache", -- Should match nginx.conf
        })
    }

    server {
        listen 8080;
        server_name localhost;

        location / {
            access_by_lua_file access.lua;
            content_by_lua_file content.lua;
        }

        location /api/protected {
            # access_by_lua_file limit.lua;
            content_by_lua_file content.lua;

            # proxy_pass http://backend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /test {
            content_by_lua_file content.lua;
        }
    }
}
